/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        cs_layer {
            bindings = <&tog 3>;
            key-positions = <16 19>;
        };

        ekternal {
            bindings = <&ext_power EP_ON>;
            key-positions = <0 1>;
        };

        eks_off {
            bindings = <&ext_power EP_OFF>;
            key-positions = <1 2>;
        };

        rgb_on {
            bindings = <&rgb_ug RGB_ON>;
            key-positions = <12 13>;
        };

        rgb_off {
            bindings = <&rgb_ug RGB_OFF>;
            key-positions = <13 14>;
        };

        bl_on {
            bindings = <&bl BL_ON>;
            key-positions = <24 25>;
        };

        bl_off {
            bindings = <&bl BL_OFF>;
            key-positions = <25 26>;
        };

        boot {
            bindings = <&bootloader>;
            key-positions = <5 4>;
        };

        sys {
            bindings = <&sys_reset>;
            key-positions = <17 16>;
        };

        toggle_power {
            bindings = <&ext_power EP_TOG>;
            key-positions = <24 26>;
        };

        soft {
            bindings = <&soft_off>;
            key-positions = <29 28>;
        };

        delete_blt {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <11 23 35>;
        };

        blt_4 {
            bindings = <&bt BT_SEL 4>;
            key-positions = <10 11>;
        };

        ble {
            bindings = <&out OUT_BLE>;
            key-positions = <23 22>;
        };

        usb {
            bindings = <&out OUT_USB>;
            key-positions = <22 21>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB              &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL            &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&mt LSHIFT CAPSLOCK  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                                   &kp LWIN  &to 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };

        layer_1 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1        &kp NUMBER_2  &kp N3        &out OUT_TOG  &bt BT_SEL 0    &kp N6           &kp N7           &kp N8      &kp N9      &kp N0          &kp BSPC
&bt BT_CLR  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &bt BT_SEL 3  &bt BT_SEL 1    &kp LEFT         &kp DOWN         &kp UP      &kp RIGHT   &bl BL_ON       &bl BL_OFF
&kp LSHFT   &kp N7        &kp N8        &kp N9        &kp N0        &bt BT_SEL 2    &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &bl BL_INC  &bl BL_DEC  &rgb_ug RGB_ON  &rgb_ug RGB_OFF
                                        &kp LGUI      &to 0         &kp SPACE       &kp RET          &trans           &kp RALT
            >;
        };

        layer_2 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        cs2 {
            bindings = <
&kp NUMBER_1  &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL     &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT     &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                            &kp LWIN  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };
    };
};
